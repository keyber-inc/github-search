# Copyright 2022 susatthi All rights reserved.
# Use of this source code is governed by a MIT license that can be
# found in the LICENSE file.

# ワークフローの表示名
name: Flutter CI

# ワークフローの起動条件を定義する
on:

  # プルリクエストが作成 or 更新された時
  pull_request:
    types:
      - opened
      - synchronize

  # main or develop ブランチに push された時
  push:
    branches:
      - main
      - develop

# 複数のジョブを定義する
# 各ジョブはそれぞれまったく別々の環境で実行される
jobs:

  # テストジョブ（ubuntu-latest）の定義
  flutter_test_ubuntu:

    # ジョブの表示名
    name: Flutter Test (ubuntu-latest)

    # ジョブを実行するOS
    runs-on: ubuntu-latest

    # タイムアウト時間（分）
    timeout-minutes: 15

    # ジョブの手順
    steps:

      # ソースコードをチェックアウト
      - name: Checkout
        uses: actions/checkout@v3

      # セットアップ
      - name: Setup Flutter
        uses: ./.github/actions/setup_flutter
        with:
          GITHUB_ACCESS_TOKEN: ${{ secrets.ENV_GITHUB_ACCESS_TOKEN }}

      # 静的解析を実行
      - name: Run Flutter Analyze
        run: flutter analyze

      # テストを実行
      - name: Run Flutter Test
        run: flutter test --machine > test-report.log

      # テスト結果を GitHub Actions に表示する
      - name: Report Test
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Flutter Test Report (ubuntu-latest)
          path: test-report.log
          reporter: flutter-json

  # テストジョブ（macos-latest-en）の定義
  flutter_test_macos_en:

    # ジョブの表示名
    name: Flutter Test (macos-latest-en)

    # ジョブを実行するOS
    runs-on: macos-latest

    # タイムアウト時間（分）
    timeout-minutes: 15

    # ジョブの手順
    steps:

      # ソースコードをチェックアウト
      - name: Checkout
        uses: actions/checkout@v3

      # セットアップ
      - name: Setup Flutter
        uses: ./.github/actions/setup_flutter
        with:
          GITHUB_ACCESS_TOKEN: ${{ secrets.ENV_GITHUB_ACCESS_TOKEN }}

      # 静的解析を実行
      - name: Run Flutter Analyze
        run: flutter analyze

      # テストを実行（英語）
      - name: Run Flutter Test (locale=en)
        run: flutter test --machine > test-report.log

      # テスト結果を GitHub Actions に表示する
      - name: Report Test (locale=en)
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Flutter Test Report (macos-latest-en)
          path: test-report.log
          reporter: flutter-json

  # テストジョブ（macos-latest-ja）の定義
  flutter_test_macos_ja:

    # ジョブの表示名
    name: Flutter Test (macos-latest-ja)

    # ジョブを実行するOS
    runs-on: macos-latest

    # タイムアウト時間（分）
    timeout-minutes: 15

    # ジョブの手順
    steps:

      # ソースコードをチェックアウト
      - name: Checkout
        uses: actions/checkout@v3

      # セットアップ
      - name: Setup Flutter
        uses: ./.github/actions/setup_flutter
        with:
          GITHUB_ACCESS_TOKEN: ${{ secrets.ENV_GITHUB_ACCESS_TOKEN }}

      # 静的解析を実行
      - name: Run Flutter Analyze
        run: flutter analyze

      # テストを実行（日本語）
      - name: Run Flutter Test (locale=ja)
        run: |
          flutter test --coverage --machine --dart-define=locale=ja > test-report.log
          brew install lcov
          sh bin/scripts/lcov_remove.sh

      # テスト結果を GitHub Actions に表示する
      - name: Report Test (locale=ja)
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Flutter Test Report (macos-latest-ja)
          path: test-report.log
          reporter: flutter-json

      # Codecov に結果を送信
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          file: coverage/lcov.info
          fail_ci_if_error: true
          flags: unittests
          verbose: true

  # テストジョブ（windows-latest）の定義
  flutter_test_windows:

    # ジョブの表示名
    name: Flutter Test (windows-latest)

    # ジョブを実行するOS
    runs-on: windows-latest

    # タイムアウト時間（分）
    timeout-minutes: 15

    # ジョブの手順
    steps:

      # ソースコードをチェックアウト
      - name: Checkout
        uses: actions/checkout@v3

      # セットアップ
      - name: Setup Flutter
        uses: ./.github/actions/setup_flutter
        with:
          GITHUB_ACCESS_TOKEN: ${{ secrets.ENV_GITHUB_ACCESS_TOKEN }}

      # 静的解析を実行
      - name: Run Flutter Analyze
        run: flutter analyze

      # テストを実行
      - name: Run Flutter Test
        run: flutter test --machine > test-report.log

      # テスト結果を GitHub Actions に表示する
      - name: Report Test
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Flutter Test Report (windows-latest)
          path: test-report.log
          reporter: flutter-json

  # Android ビルドジョブの定義
  flutter_build_android:

    # ジョブの表示名
    name: Flutter Build for Android

    # ジョブを実行するOS
    runs-on: ubuntu-latest

    # タイムアウト時間（分）
    timeout-minutes: 15

    # ジョブの手順
    steps:

      # ソースコードをチェックアウト
      - name: Checkout
        uses: actions/checkout@v3

      # セットアップ
      - name: Setup Flutter
        uses: ./.github/actions/setup_flutter
        with:
          GITHUB_ACCESS_TOKEN: ${{ secrets.ENV_GITHUB_ACCESS_TOKEN }}

      # Android Release Build
      - name: Build for Android
        run: flutter build appbundle -t lib/main.dart --release

  # iOS ビルドジョブの定義
  flutter_build_ios:

    # ジョブの表示名
    name: Flutter Build for iOS

    # ジョブを実行するOS
    runs-on: macos-latest

    # タイムアウト時間（分）
    timeout-minutes: 15

    # ジョブの手順
    steps:

      # ソースコードをチェックアウト
      - name: Checkout
        uses: actions/checkout@v3

      # セットアップ
      - name: Setup Flutter
        uses: ./.github/actions/setup_flutter
        with:
          GITHUB_ACCESS_TOKEN: ${{ secrets.ENV_GITHUB_ACCESS_TOKEN }}

      # プロビジョニングファイルの取り込み
      - name: Import Provisioning Profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          touch ~/Library/MobileDevice/Provisioning\ Profiles/decoded.mobileprovision
          echo -n '${{ secrets.APPLE_PROVISIONING_PROFILE }}' | base64 -d -o ~/Library/MobileDevice/Provisioning\ Profiles/decoded.mobileprovision

      # 証明書の取り込み
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATES_P12 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

      # iOS Release Build
      - name: Build for iOS
        run: flutter build ipa -t lib/main.dart --release

  # macOS ビルドジョブの定義
  flutter_build_macos:

    # ジョブの表示名
    name: Flutter Build for macOS

    # ジョブを実行するOS
    runs-on: macos-latest

    # タイムアウト時間（分）
    timeout-minutes: 15

    # ジョブの手順
    steps:

      # ソースコードをチェックアウト
      - name: Checkout
        uses: actions/checkout@v3

      # セットアップ
      - name: Setup Flutter
        uses: ./.github/actions/setup_flutter
        with:
          GITHUB_ACCESS_TOKEN: ${{ secrets.ENV_GITHUB_ACCESS_TOKEN }}

      # プロビジョニングファイルの取り込み
      - name: Import Provisioning Profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          touch ~/Library/MobileDevice/Provisioning\ Profiles/decoded.mobileprovision
          echo -n '${{ secrets.MACOS_PROVISIONING_PROFILE }}' | base64 -d -o ~/Library/MobileDevice/Provisioning\ Profiles/decoded.mobileprovision

      # 証明書の取り込み
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATES_P12 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

      # iOS Release Build
      - name: Build for macOS
        run: |
          flutter config --enable-macos-desktop
          flutter build macos -t lib/main.dart --release

  # Windows ビルドジョブの定義
  flutter_build_windows:

    # ジョブの表示名
    name: Flutter Build for Windows

    # ジョブを実行するOS
    runs-on: windows-latest

    # タイムアウト時間（分）
    timeout-minutes: 15

    # ジョブの手順
    steps:

      # ソースコードをチェックアウト
      - name: Checkout
        uses: actions/checkout@v3

      # セットアップ
      - name: Setup Flutter
        uses: ./.github/actions/setup_flutter
        with:
          GITHUB_ACCESS_TOKEN: ${{ secrets.ENV_GITHUB_ACCESS_TOKEN }}

      # Windows Release Build
      - name: Build for Windows
        run: |
          flutter config --enable-windows-desktop
          flutter build windows -t lib/main.dart --release

  # Web ビルドジョブの定義
  flutter_build_web:

    # ジョブの表示名
    name: Flutter Build for Web

    # ジョブを実行するOS
    runs-on: ubuntu-latest

    # タイムアウト時間（分）
    timeout-minutes: 15

    # ジョブの手順
    steps:

      # ソースコードをチェックアウト
      - name: Checkout
        uses: actions/checkout@v3

      # セットアップ
      - name: Setup Flutter
        uses: ./.github/actions/setup_flutter
        with:
          GITHUB_ACCESS_TOKEN: ${{ secrets.ENV_GITHUB_ACCESS_TOKEN }}

      # Web Release Build
      - name: Build for Web
        run: |
          flutter config --enable-web
          flutter build web -t lib/main.dart --web-renderer html

  # # API ドキュメント作成ジョブの定義
  # flutter_api_doc:

  #   # ジョブの表示名
  #   name: Flutter API doc

  #   # ジョブを実行するOS
  #   runs-on: ubuntu-latest

  #   # タイムアウト時間（分）
  #   timeout-minutes: 15

  #   # ジョブの手順
  #   steps:

  #     # ソースコードをチェックアウト
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     # セットアップ
  #     - name: Setup Flutter
  #       uses: ./.github/actions/setup_flutter
  #       with:
  #         GITHUB_ACCESS_TOKEN: ${{ secrets.ENV_GITHUB_ACCESS_TOKEN }}

  #     # dartdoc を実行
  #     - name: Run Dartdoc
  #       run: |
  #         dart pub global activate dartdoc
  #         dartdoc

  #     # API ドキュメントを artifacts にアップロード
  #     - name: Upload API doc to Artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: api-doc
  #         path: doc/api

  #     # main ブランチのときだけ API ドキュメントを GitHub Pages にデプロイ
  #     - name: Deploy API doc to GitHub Pages
  #       if: ${{ github.ref == 'refs/heads/main' }}
  #       uses: peaceiris/actions-gh-pages@v3
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         publish_dir: doc/api
  #         publish_branch: gh-pages  # default: gh-pages

  # Slack通知ジョブの定義
  notify_slack:

    # ジョブの表示名
    name: Notify to Slack

    # 常に実行する
    if: always()

    # すべてのジョブが終了したら実行する
    needs:
      - flutter_test_ubuntu
      - flutter_test_macos_en
      - flutter_test_macos_ja
      - flutter_test_windows
      - flutter_build_android
      - flutter_build_ios
      - flutter_build_web
      - flutter_build_macos
      - flutter_build_windows
      # - flutter_api_doc

    # ジョブを実行するOS
    runs-on: ubuntu-latest

    # 環境変数の定義
    env:
      SLACK_USERNAME: GitHub Actions
      SLACK_ICON: https://raw.githubusercontent.com/github/explore/2c7e603b797535e5ad8b4beb575ab3b7354666e1/topics/actions/actions.png
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

    # ジョブの手順
    steps:

      # すべて成功したとき
      - name: Notify Succeed
        if: ${{ !cancelled() && !contains(needs.*.result, 'failure') }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: SUCCESSED TEST AND BUILD!
          SLACK_COLOR: good

      # ubuntu テストに失敗したとき
      - name: Notify Failure Test for ubuntu-latest
        if: ${{ needs.flutter_test_ubuntu.result == 'failure' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: FAILURE TEST (ubuntu-latest) ...
          SLACK_COLOR: danger

      # macos-en テストに失敗したとき
      - name: Notify Failure Test for macos-latest
        if: ${{ needs.flutter_test_macos_en.result == 'failure' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: FAILURE TEST (macos-latest-en) ...
          SLACK_COLOR: danger

      # macos-ja テストに失敗したとき
      - name: Notify Failure Test for macos-latest
        if: ${{ needs.flutter_test_macos_ja.result == 'failure' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: FAILURE TEST (macos-latest-ja) ...
          SLACK_COLOR: danger

      # windows テストに失敗したとき
      - name: Notify Failure Test for windows-latest
        if: ${{ needs.flutter_test_windows.result == 'failure' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: FAILURE TEST (windows-latest) ...
          SLACK_COLOR: danger

      # Android ビルドに失敗したとき
      - name: Notify Failure Build for Android
        if: ${{ needs.flutter_build_android.result == 'failure' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: FAILURE BUILD ANDROID ...
          SLACK_COLOR: danger

      # iOS ビルドに失敗したとき
      - name: Notify Failure Build for iOS
        if: ${{ needs.flutter_build_ios.result == 'failure' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: FAILURE BUILD IOS ...
          SLACK_COLOR: danger

      # Web ビルドに失敗したとき
      - name: Notify Failure Build for Web
        if: ${{ needs.flutter_build_web.result == 'failure' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: FAILURE BUILD WEB ...
          SLACK_COLOR: danger

      # macOS ビルドに失敗したとき
      - name: Notify Failure Build for macOS
        if: ${{ needs.flutter_build_macos.result == 'failure' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: FAILURE BUILD MACOS ...
          SLACK_COLOR: danger

      # Windows ビルドに失敗したとき
      - name: Notify Failure Build for Windows
        if: ${{ needs.flutter_build_windows.result == 'failure' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: FAILURE BUILD WINDOWS ...
          SLACK_COLOR: danger

      # # API doc 作成に失敗したとき
      # - name: Notify Failure API doc
      #   if: ${{ needs.flutter_api_doc.result == 'failure' }}
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_TITLE: FAILURE API DOC ...
      #     SLACK_COLOR: danger
